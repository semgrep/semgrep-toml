(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_toml"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "comment", None;
  "pat_13899e9", None;
  "imm_tok_squot", None;
  "pat_3a40bf7", None;
  "imm_tok_rep1_pat_5e241f9", None;
  "escape_sequence", None;
  "bare_key", None;
  "multiline_basic_string_content", None;
  "boolean", None;
  "multiline_basic_string_end", None;
  "local_time", None;
  "multiline_literal_string_content", None;
  "imm_tok_pat_509ec78", None;
  "imm_tok_rep1_pat_fee4e64", None;
  "local_date", None;
  "pat_3b4bc24", None;
  "line_ending_or_eof", None;
  "tok_pat_da2991f_choice_pat_37ac644", None;
  "multiline_literal_string_end", None;
  "pat_c9267ca", None;
  "offset_date_time", None;
  "pat_509ec78", None;
  "imm_tok_dquot", None;
  "escape_line_ending", None;
  "pat_da2991f", None;
  "local_date_time", None;
  "literal_string",
  Some (
    Seq [
      Token (Literal "'");
      Opt (
        Token (Name "imm_tok_rep1_pat_fee4e64");
      );
      Token (Name "imm_tok_squot");
    ];
  );
  "float",
  Some (
    Alt [|
      Token (Name "tok_pat_da2991f_choice_pat_37ac644");
      Token (Name "pat_13899e9");
    |];
  );
  "multiline_literal_string",
  Some (
    Seq [
      Token (Literal "'''");
      Repeat (
        Alt [|
          Token (Name "imm_tok_rep1_pat_fee4e64");
          Token (Name "multiline_literal_string_content");
          Token (Name "imm_tok_pat_509ec78");
        |];
      );
      Token (Name "multiline_literal_string_end");
    ];
  );
  "basic_string",
  Some (
    Seq [
      Token (Literal "\"");
      Repeat (
        Alt [|
          Token (Name "imm_tok_rep1_pat_5e241f9");
          Token (Name "escape_sequence");
        |];
      );
      Token (Name "imm_tok_dquot");
    ];
  );
  "multiline_basic_string",
  Some (
    Seq [
      Token (Literal "\"\"\"");
      Repeat (
        Alt [|
          Token (Name "imm_tok_rep1_pat_5e241f9");
          Token (Name "multiline_basic_string_content");
          Token (Name "imm_tok_pat_509ec78");
          Token (Name "escape_sequence");
          Token (Name "escape_line_ending");
        |];
      );
      Token (Name "multiline_basic_string_end");
    ];
  );
  "integer",
  Some (
    Alt [|
      Token (Name "pat_da2991f");
      Token (Name "pat_3a40bf7");
      Token (Name "pat_3b4bc24");
      Token (Name "pat_c9267ca");
    |];
  );
  "quoted_key",
  Some (
    Alt [|
      Token (Name "basic_string");
      Token (Name "literal_string");
    |];
  );
  "string",
  Some (
    Alt [|
      Token (Name "basic_string");
      Token (Name "multiline_basic_string");
      Token (Name "literal_string");
      Token (Name "multiline_literal_string");
    |];
  );
  "key",
  Some (
    Alt [|
      Token (Name "bare_key");
      Token (Name "quoted_key");
    |];
  );
  "dotted_key",
  Some (
    Seq [
      Alt [|
        Token (Name "dotted_key");
        Token (Name "key");
      |];
      Token (Literal ".");
      Token (Name "key");
    ];
  );
  "array",
  Some (
    Seq [
      Token (Literal "[");
      Repeat (
        Token (Name "pat_509ec78");
      );
      Opt (
        Seq [
          Token (Name "inline_value");
          Repeat (
            Token (Name "pat_509ec78");
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Repeat (
                Token (Name "pat_509ec78");
              );
              Token (Name "inline_value");
              Repeat (
                Token (Name "pat_509ec78");
              );
            ];
          );
          Opt (
            Seq [
              Token (Literal ",");
              Repeat (
                Token (Name "pat_509ec78");
              );
            ];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "inline_pair",
  Some (
    Seq [
      Alt [|
        Token (Name "dotted_key");
        Token (Name "key");
      |];
      Token (Literal "=");
      Token (Name "inline_value");
    ];
  );
  "inline_table",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "inline_pair");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "inline_pair");
            ];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "inline_value",
  Some (
    Alt [|
      Token (Name "string");
      Token (Name "integer");
      Token (Name "float");
      Token (Name "boolean");
      Token (Name "offset_date_time");
      Token (Name "local_date_time");
      Token (Name "local_date");
      Token (Name "local_time");
      Token (Name "array");
      Token (Name "inline_table");
    |];
  );
  "pair",
  Some (
    Seq [
      Token (Name "inline_pair");
      Token (Name "line_ending_or_eof");
    ];
  );
  "table",
  Some (
    Seq [
      Token (Literal "[");
      Alt [|
        Token (Name "dotted_key");
        Token (Name "key");
      |];
      Token (Literal "]");
      Token (Name "line_ending_or_eof");
      Repeat (
        Alt [|
          Token (Name "pair");
          Token (Name "pat_509ec78");
        |];
      );
    ];
  );
  "table_array_element",
  Some (
    Seq [
      Token (Literal "[[");
      Alt [|
        Token (Name "dotted_key");
        Token (Name "key");
      |];
      Token (Literal "]]");
      Token (Name "line_ending_or_eof");
      Repeat (
        Alt [|
          Token (Name "pair");
          Token (Name "pat_509ec78");
        |];
      );
    ];
  );
  "document",
  Some (
    Seq [
      Repeat (
        Alt [|
          Token (Name "pair");
          Token (Name "pat_509ec78");
        |];
      );
      Repeat (
        Alt [|
          Token (Name "table");
          Token (Name "table_array_element");
        |];
      );
    ];
  );
]

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_13899e9 ((kind, body) : mt) : CST.pat_13899e9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_squot ((kind, body) : mt) : CST.imm_tok_squot =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3a40bf7 ((kind, body) : mt) : CST.pat_3a40bf7 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_rep1_pat_5e241f9 ((kind, body) : mt) : CST.imm_tok_rep1_pat_5e241f9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_bare_key ((kind, body) : mt) : CST.bare_key =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_multiline_basic_string_content ((kind, body) : mt) : CST.multiline_basic_string_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_boolean ((kind, body) : mt) : CST.boolean =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_multiline_basic_string_end ((kind, body) : mt) : CST.multiline_basic_string_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_local_time ((kind, body) : mt) : CST.local_time =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_multiline_literal_string_content ((kind, body) : mt) : CST.multiline_literal_string_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_509ec78 ((kind, body) : mt) : CST.imm_tok_pat_509ec78 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_rep1_pat_fee4e64 ((kind, body) : mt) : CST.imm_tok_rep1_pat_fee4e64 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_local_date ((kind, body) : mt) : CST.local_date =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3b4bc24 ((kind, body) : mt) : CST.pat_3b4bc24 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_line_ending_or_eof ((kind, body) : mt) : CST.line_ending_or_eof =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_pat_da2991f_choice_pat_37ac644 ((kind, body) : mt) : CST.tok_pat_da2991f_choice_pat_37ac644 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_multiline_literal_string_end ((kind, body) : mt) : CST.multiline_literal_string_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c9267ca ((kind, body) : mt) : CST.pat_c9267ca =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_offset_date_time ((kind, body) : mt) : CST.offset_date_time =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_509ec78 ((kind, body) : mt) : CST.pat_509ec78 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_dquot ((kind, body) : mt) : CST.imm_tok_dquot =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_line_ending ((kind, body) : mt) : CST.escape_line_ending =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_da2991f ((kind, body) : mt) : CST.pat_da2991f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_local_date_time ((kind, body) : mt) : CST.local_date_time =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_literal_string ((kind, body) : mt) : CST.literal_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_imm_tok_rep1_pat_fee4e64 (Run.matcher_token v)
              )
              v1
            ,
            trans_imm_tok_squot (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_float_ ((kind, body) : mt) : CST.float_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tok_pat_da2991f_choice_pat_37ac644 (
            trans_tok_pat_da2991f_choice_pat_37ac644 (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_13899e9 (
            trans_pat_13899e9 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_multiline_literal_string ((kind, body) : mt) : CST.multiline_literal_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_rep1_pat_fee4e64 (
                      trans_imm_tok_rep1_pat_fee4e64 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Mult_lit_str_content (
                      trans_multiline_literal_string_content (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Imm_tok_pat_509ec78 (
                      trans_imm_tok_pat_509ec78 (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_multiline_literal_string_end (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_basic_string ((kind, body) : mt) : CST.basic_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_rep1_pat_5e241f9 (
                      trans_imm_tok_rep1_pat_5e241f9 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_imm_tok_dquot (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_multiline_basic_string ((kind, body) : mt) : CST.multiline_basic_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_rep1_pat_5e241f9 (
                      trans_imm_tok_rep1_pat_5e241f9 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Mult_basic_str_content (
                      trans_multiline_basic_string_content (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Imm_tok_pat_509ec78 (
                      trans_imm_tok_pat_509ec78 (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Esc_line_ending (
                      trans_escape_line_ending (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_multiline_basic_string_end (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_integer ((kind, body) : mt) : CST.integer =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_da2991f (
            trans_pat_da2991f (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_3a40bf7 (
            trans_pat_3a40bf7 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_3b4bc24 (
            trans_pat_3b4bc24 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_c9267ca (
            trans_pat_c9267ca (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_key ((kind, body) : mt) : CST.quoted_key =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Basic_str (
            trans_basic_string (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Lit_str (
            trans_literal_string (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Basic_str (
            trans_basic_string (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Mult_basic_str (
            trans_multiline_basic_string (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Lit_str (
            trans_literal_string (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Mult_lit_str (
            trans_multiline_literal_string (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_key ((kind, body) : mt) : CST.key =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Bare_key (
            trans_bare_key (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_key (
            trans_quoted_key (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_dotted_key ((kind, body) : mt) : CST.dotted_key =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Dotted_key (
                  trans_dotted_key (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Key (
                  trans_key (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_key (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_array_ ((kind, body) : mt) : CST.array_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_pat_509ec78 (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      trans_inline_value (Run.matcher_token v0),
                      Run.repeat
                        (fun v -> trans_pat_509ec78 (Run.matcher_token v))
                        v1
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2; v3] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.repeat
                                  (fun v -> trans_pat_509ec78 (Run.matcher_token v))
                                  v1
                                ,
                                trans_inline_value (Run.matcher_token v2),
                                Run.repeat
                                  (fun v -> trans_pat_509ec78 (Run.matcher_token v))
                                  v3
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.repeat
                                  (fun v -> trans_pat_509ec78 (Run.matcher_token v))
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v3
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inline_pair ((kind, body) : mt) : CST.inline_pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Dotted_key (
                  trans_dotted_key (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Key (
                  trans_key (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_inline_value (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inline_table ((kind, body) : mt) : CST.inline_table =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_inline_pair (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_inline_pair (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inline_value ((kind, body) : mt) : CST.inline_value =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Int (
            trans_integer (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Float (
            trans_float_ (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Bool (
            trans_boolean (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Offset_date_time (
            trans_offset_date_time (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Local_date_time (
            trans_local_date_time (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Local_date (
            trans_local_date (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Local_time (
            trans_local_time (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Array (
            trans_array_ (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Inline_table (
            trans_inline_table (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pair ((kind, body) : mt) : CST.pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_inline_pair (Run.matcher_token v0),
            trans_line_ending_or_eof (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_table ((kind, body) : mt) : CST.table =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Dotted_key (
                  trans_dotted_key (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Key (
                  trans_key (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_line_ending_or_eof (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Pair (
                      trans_pair (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Pat_509ec78 (
                      trans_pat_509ec78 (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_table_array_element ((kind, body) : mt) : CST.table_array_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Dotted_key (
                  trans_dotted_key (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Key (
                  trans_key (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_line_ending_or_eof (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Pair (
                      trans_pair (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Pat_509ec78 (
                      trans_pat_509ec78 (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_document ((kind, body) : mt) : CST.document =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Pair (
                      trans_pair (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Pat_509ec78 (
                      trans_pat_509ec78 (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Table (
                      trans_table (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Table_array_elem (
                      trans_table_array_element (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_document

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

